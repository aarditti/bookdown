[["index.html", "Large Wood Impacts on Sediment Transport Following Wildfire Chapter 1 Introduction 1.1 Overview of Project 1.2 Project Background", " Large Wood Impacts on Sediment Transport Following Wildfire Alec Arditti 2021-04-30 Chapter 1 Introduction 1.1 Overview of Project I am mapping woody debris (LW) over time in stream channels following wildfire. This spatial and temporal dataset will be applied in conjunction with geomorphic features to determine the location of sediment routing bottlenecks and which watersheds are more connected. These results will also be compared to an existing post-fire sediment routing model. 1.2 Project Background This shows my bookdown document for my Reproducible Data Science Class. I am a graduate student at Utah State University in the Watershed Sciences Department The bookdown package can be installed from CRAN or Github: install.packages(&quot;bookdown&quot;) # or the development version # devtools::install_github(&quot;rstudio/bookdown&quot;) Remember each Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading #. To compile this example to PDF, you need XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): https://yihui.org/tinytex/. "],["data.html", "Chapter 2 Data 2.1 Datasets 2.2 Database Structure", " Chapter 2 Data 2.1 Datasets Fires dataset: These are past wildfires that will serve as study sites. These 18 sites have been selected on the basis of having variable slope steepness, coniferous cover and burn severity. Satellite Imagery: This consists of Google and Hexagon available aerial imagery that will be used for analysis.Imagery was taken at different points along a 10 year period and varies in resolution and extent. LW (large wood) dataset: LW features (jams and individual logs) will be stored in this dataset.Attributes of features will be recorded based on the aerial imagery and context of the burn severity as well as the valley bottom. 2.2 Database Structure LW (large wood) data will be collected for each fire based on available satellite imagery in different years. Each temporal point will consist of an LW dataset and these datasets will be compiled for each fire to comprise a database. Figure 1- Database Schema "],["build-the-database.html", "Chapter 3 Build the Database", " Chapter 3 Build the Database ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union ## -- Attaching packages --------------------------------------- tidyverse 1.3.0 -- ## v ggplot2 3.3.2 v purrr 0.3.4 ## v tibble 3.0.4 v stringr 1.4.0 ## v tidyr 1.1.2 v forcats 0.5.0 ## v readr 1.4.0 ## -- Conflicts ------------------------------------------ tidyverse_conflicts() -- ## x tidyr::extract() masks magrittr::extract() ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() ## x purrr::set_names() masks magrittr::set_names() First I will connect to the database: lw &lt;- dbConnect(RSQLite::SQLite(), &quot;C:/Users/BelmontLab/Documents/Alec/School/Spring 2021/Full Lifecycle of Data Management/R markdown assignment/lw.db&quot;) Then I will add each dataset to the database and link them Fires dbExecute(lw, &quot;CREATE TABLE Fires ( Fire_ID INTEGER PRIMARY KEY AUTOINCREMENT, Fire_Name varchar(25), Acreage varchar(5), Avg_slope varchar(5), Per_conifer varchar(5), Severity varchar(5), Burn varchar(25), Slope varchar(25), Trees varchar(25), Class varchar(25), DebrisFlowFire varchar(3) );&quot;) ## [1] 0 fires &lt;- read.csv(&quot;C:/Users/BelmontLab/Documents/Alec/School/Spring 2021/Full Lifecycle of Data Management/Bookdown/Bookdown- LW/Fires.csv&quot;) fires$Fire_ID &lt;- 1:nrow(fires) dbWriteTable(lw, &quot;Fires&quot;, fires, append = TRUE) fires&lt;-dbGetQuery(lw, &quot;SELECT * FROM Fires;&quot;) Imagery dbExecute(lw, &quot;CREATE TABLE Aerial_Imagery ( Imagery_ID INTEGER PRIMARY KEY AUTOINCREMENT, Fire_name varchar(25), Type varchar(50), Fire_Year char(4), years varchar(10), Source varchar(25), year char(4), FOREIGN KEY (Fire_name) REFERENCES Fires(Fire_name) );&quot;) ## [1] 0 imagery &lt;- read.csv(&quot;C:/Users/BelmontLab/Documents/Alec/School/Spring 2021/Full Lifecycle of Data Management/Bookdown/Bookdown- LW/aerial.csv&quot;) names(imagery)[1] &lt;- &quot;Fire_name&quot; imagery&lt;-imagery %&gt;% pivot_longer(`Before`:`Year.8`, values_to = &quot;Source&quot;, names_to = &quot;years&quot;) %&gt;% mutate(year = stringr::word(Source, 2, 2, &quot; &quot;), Source = stringr::word(Source, 1, 1, &quot; &quot;)) imagery$Imagery_ID &lt;- 1:nrow(imagery) dbWriteTable(lw, &quot;Aerial_Imagery&quot;, imagery, append = TRUE) aerial&lt;-dbGetQuery(lw, &quot;SELECT * FROM Aerial_Imagery;&quot;) Large Wood dbExecute(lw, &quot;CREATE TABLE LW_DATA ( OBJECTID varchar(3) NOT NULL, Fire_name varchar(25), Imagery_ID varchar(2), Quantity varchar(3), Location varchar(20) CHECK (Location IN (&#39;Channel&#39;, &#39;Overhanging&#39;, &#39;Floodplain&#39;, &#39;Channel_Spanning&#39;)), Obscured varchar(20) CHECK (Obscured IN (&#39;No&#39;, &#39;Some&#39;,&#39;Many&#39;,&#39;Unclear&#39;)), Setting varchar(20) CHECK (Setting IN (&#39;Upstream&#39;, &#39;Debris Flow&#39;,&#39;Bank&#39;,&#39;NA&#39;)), Burned varchar(20), Area_m2 varchar(5), SHAPE_Length varchar(5), SHAPE_Area varchar(5), PRIMARY KEY (OBJECTID), FOREIGN KEY (Fire_name) REFERENCES Fires(Fire_name) FOREIGN KEY (Imagery_ID) REFERENCES Aerial_Imagery(Imagery_ID) );&quot;) ## [1] 0 lw_table &lt;- read.csv(&quot;C:/Users/BelmontLab/Documents/Alec/School/Spring 2021/Full Lifecycle of Data Management/Bookdown/Bookdown- LW/lw.csv&quot;) dbWriteTable(lw, &quot;LW_DATA&quot;, lw_table, append = TRUE) lw_data&lt;-dbGetQuery(lw, &quot;SELECT * FROM LW_DATA;&quot;) Thats all folks! "],["metrics.html", "Chapter 4 Metrics", " Chapter 4 Metrics Various metrics on my data Sites with the most available aerial imagery number&lt;-aerial%&gt;% filter(year!=&#39;NA&#39;)%&gt;% group_by(Fire_name) %&gt;% tally() %&gt;% arrange(desc(n)) First and last years of data range&lt;-aerial%&gt;% group_by(Fire_name) %&gt;% filter(year!=&#39;NA&#39;)%&gt;% summarize(min_year=min(year), max_year=max(year)) ## `summarise()` ungrouping output (override with `.groups` argument) Site with the greatest frequency of imagery range%&gt;% filter(min_year != &quot;&quot;) %&gt;% mutate(range=as.numeric(max_year)-as.numeric(min_year)+1) %&gt;% left_join(number, by=&quot;Fire_name&quot;) %&gt;% mutate(freq_per_yr=n/range) %&gt;% mutate(freq_per_yr=round(freq_per_yr,1)) %&gt;% arrange(desc(freq_per_yr)) ## # A tibble: 13 x 6 ## Fire_name min_year max_year range n freq_per_yr ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 &quot;Box Canyon&quot; 2016 2019 4 5 1.2 ## 2 &quot;Pole Creek&quot; 2018 2021 4 5 1.2 ## 3 &quot;Blind Canyon&quot; 2011 2018 8 8 1 ## 4 &quot;Brianhead&quot; 2017 2019 3 3 1 ## 5 &quot;Dollar Ridge &quot; 2017 2020 4 4 1 ## 6 &quot;Goose Creek&quot; 2018 2018 1 1 1 ## 7 &quot;Lake Fork&quot; 2012 2019 8 8 1 ## 8 &quot;Tank Hollow&quot; 2018 2019 2 2 1 ## 9 &quot;Bridge&quot; 2012 2019 8 7 0.9 ## 10 &quot;Clay Springs&quot; 2011 2020 10 8 0.8 ## 11 &quot;Seeley&quot; 2010 2019 10 7 0.7 ## 12 &quot;Shingle&quot; 2013 2019 7 4 0.6 ## 13 &quot;Twitchell Canyon&quot; 2011 2018 8 3 0.4 We can see that Box Canyon and Pole Creek have the most available imagery for their time period and will have the highest temporal resolution for analysis. Wood Features broken down as individual pieces and jams woodnumber&lt;-lw_data%&gt;% mutate(Feature_type = case_when( Quantity==&quot;1&quot; ~ &quot;Individual Piece&quot;, TRUE ~ &quot;Wood Jam&quot;)) %&gt;% group_by(Feature_type) %&gt;% tally() Wood Features broken down by amount of wood in each type woodamount&lt;-lw_data%&gt;% mutate(Feature_type = case_when( Quantity==&quot;1&quot; ~ &quot;Individual Piece&quot;, TRUE ~ &quot;Wood Jam&quot;)) %&gt;% group_by(Feature_type) %&gt;% summarize(sumQ=sum(as.numeric(Quantity))) ## `summarise()` ungrouping output (override with `.groups` argument) woodnumber %&gt;% left_join(woodamount, by=&quot;Feature_type&quot;) ## # A tibble: 2 x 3 ## Feature_type n sumQ ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Individual Piece 28 28 ## 2 Wood Jam 5 54 How much area does the average wood piece take up? lw_data%&gt;% select(Area_m2,Quantity) %&gt;% mutate(wood_size=as.numeric(Area_m2)/as.numeric(Quantity)) %&gt;% summarize(mean_wood_size=mean(wood_size)) "],["graphs.html", "Chapter 5 Graphs 5.1 Fires by different landcover characteristics 5.2 Months that aerial imagery is available for 5.3 Size of wood features in each channel location 5.4 Obscured by burn severity", " Chapter 5 Graphs The graphs below show the breakdown of my initial data. 5.1 Fires by different landcover characteristics library(&quot;plotly&quot;) # load ## Warning: package &#39;plotly&#39; was built under R version 4.0.5 ## ## Attaching package: &#39;plotly&#39; ## The following object is masked from &#39;package:ggplot2&#39;: ## ## last_plot ## The following object is masked from &#39;package:stats&#39;: ## ## filter ## The following object is masked from &#39;package:graphics&#39;: ## ## layout fires %&gt;% plot_ly(x =fires$Severity, y=fires$Per_conifer, z=fires$Avg_slope, color= fires$Class, colors = c(&#39;#BF382A&#39;, &#39;#0C4B8E&#39;,&#39;#4AC6B7&#39;, &#39;#1972A4&#39;, &#39;#965F8A&#39;,&#39;#FF7070&#39;, &#39;#C61951&#39;), size =as.numeric(fires$Acreage),text=fires$Fire_Name, marker = list(symbol = &#39;circle&#39;, sizemode = &#39;diameter&#39;), sizes = c(5, 50)) %&gt;% layout(scene = list(xaxis = list(title = &#39;% Moderate/High Severity&#39;), yaxis = list(title = &#39;% Conifer&#39;), zaxis = list(title = &#39;% Slope&gt;23?&#39;))) ## No trace type specified: ## Based on info supplied, a &#39;scatter3d&#39; trace seems appropriate. ## Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter3d ## No scatter3d mode specifed: ## Setting the mode to markers ## Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode ## Warning: `line.width` does not currently support multiple values. ## Warning: `line.width` does not currently support multiple values. ## Warning: `line.width` does not currently support multiple values. ## Warning: `line.width` does not currently support multiple values. ## Warning: `line.width` does not currently support multiple values. ## Warning: `line.width` does not currently support multiple values. ## Warning: `line.width` does not currently support multiple values. 5.2 Months that aerial imagery is available for ##Density graph of size of wood features lw_data %&gt;% ggplot(mapping = aes(y=as.numeric(Area_m2)))+ geom_density() ##Wood features by Setting lw_data %&gt;% ggplot(mapping = aes(x=Setting))+ geom_bar() 5.3 Size of wood features in each channel location lw_data %&gt;% ggplot(mapping = aes(x=Location, y=Quantity))+ geom_boxplot() 5.4 Obscured by burn severity "],["final-words.html", "Chapter 6 Final Words", " Chapter 6 Final Words Thank you for a great class! My dataset is not complete (will probably take a few years to complete) but I have a headstart on things. Hope to see you and Diego around! "],["references.html", "References", " References "]]
